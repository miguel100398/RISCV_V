/home/ubuntu/mbucio/tools/openROAD/flow/util/preprocessLib.py -i /home/ubuntu/mbucio/tools/openROAD/flow/platforms/nangate45/lib/NangateOpenCellLibrary_typical.lib -o objects/nangate45/riscv_v_ctrl/base/lib/NangateOpenCellLibrary_typical.lib
Opening file for replace: /home/ubuntu/mbucio/tools/openROAD/flow/platforms/nangate45/lib/NangateOpenCellLibrary_typical.lib
Commented 0 lines containing "original_pin"
Replaced malformed functions 0
Writing replaced file: objects/nangate45/riscv_v_ctrl/base/lib/NangateOpenCellLibrary_typical.lib
mkdir -p results/nangate45/riscv_v_ctrl/base/
echo 15.0 > results/nangate45/riscv_v_ctrl/base/clock_period.txt
mkdir -p ./results/nangate45/riscv_v_ctrl/base ./logs/nangate45/riscv_v_ctrl/base ./reports/nangate45/riscv_v_ctrl/base ./objects/nangate45/riscv_v_ctrl/base
(env time -f 'Elapsed time: %E[h:]min:sec. CPU time: user %U sys %S (%P). Peak memory: %MKB.' /home/ubuntu/mbucio/tools/openROAD/tools/install/yosys/bin/yosys -v 3 -c /home/ubuntu/mbucio/tools/openROAD/flow/scripts/synth_canonicalize.tcl) 2>&1 | tee /home/ubuntu/mbucio/tools/openROAD/flow/logs/nangate45/riscv_v_ctrl/base/1_1_yosys_canonicalize.log
1. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_stage_7EB58.v
2. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_stage_1F582_5645A.v
3. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_stage_96DA9_C2B4E.v
4. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_stage_300B3_9090A.v
5. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_stage_969A4_CCEB1.v
6. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_stage_63257_B3D37.v
7. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_stage_A4EAF_A7C6B.v
8. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_stage_C3F9D_39151.v
9. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_stage_E6BB0_71521.v
10. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_stage_EA379.v
11. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_stage_EE621_F935D.v
12. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_stage_300C0.v
13. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_stage_A8A75.v
14. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_stage_C9449.v
15. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_ctrl.v
16. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_csr_ctrl.v
17. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_csr.v
18. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_rf_ctrl.v
19. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_rf.v
20. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_decode.v
21. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_memory.v
22. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_reduct_src.v
23. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_bitwise_and.v
24. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_bw_and.v
25. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_bitwise_or.v
26. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_bw_or.v
27. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_bitwise_xor.v
28. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_bw_xor.v
29. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/shifter.v
30. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_shifter.v
31. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_logic_ALU.v
32. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/full_adder.v
33. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/half_adder.v
34. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/ripple_carry_adder.v
35. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/behavioral_adder.v
36. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/adder_nbit.v
37. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_adder.v
38. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_twos_comp_sel.v
39. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/multiplier_2bit.v
40. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/vedic_mul_unsigned_2bits.v
41. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/vedic_mul_unsigned_4bits.v
42. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/vedic_mul_unsigned_8bits.v
43. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/vedic_mul_unsigned_16bits.v
44. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/vedic_mul_unsigned_32bits.v
45. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/vedic_mul_unsigned_64bits.v
46. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/vedic_mul_unsigned_128bits.v
47. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_mul.v
48. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_extend.v
49. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_arithmetic_ALU.v
50. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_permutation_ALU.v
51. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_exe_alu.v
52. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_decode_element.v
53. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_bypass.v
54. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_swizzle.v
55. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v_execute.v
56. Executing Verilog-2005 frontend: ./designs/src/riscv_v_ctrl/convert_to_v/riscv_v.v
57. Executing Liberty frontend: ./objects/nangate45/riscv_v_ctrl/base/lib/NangateOpenCellLibrary_typical.lib
58. Executing Verilog-2005 frontend: /home/ubuntu/mbucio/tools/openROAD/flow/platforms/nangate45/cells_clkgate.v
Using ABC speed script.
Extracting clock period from SDC file: ./results/nangate45/riscv_v_ctrl/base/clock_period.txt
Setting clock period to 15.0
59. Executing HIERARCHY pass (managing design hierarchy).
60. Executing AST frontend in derive mode using pre-parsed AST for module `\riscv_v_ctrl'.
60.1. Analyzing design hierarchy..
60.2. Executing AST frontend in derive mode using pre-parsed AST for module `\riscv_v_stage_A4EAF_A7C6B'.
60.3. Executing AST frontend in derive mode using pre-parsed AST for module `\riscv_v_stage_EE621_F935D'.
60.4. Executing AST frontend in derive mode using pre-parsed AST for module `\riscv_v_stage_C9449'.
60.5. Analyzing design hierarchy..
60.6. Analyzing design hierarchy..
61. Executing OPT_CLEAN pass (remove unused cells and wires).
Warning: Ignoring module $paramod$b0230628c117cc5e1d7c014133e13870b792ff24\riscv_v_stage_EE621_F935D because it contains processes (run 'proc' command first).
Warning: Ignoring module $paramod$71bc36355404bda2cb143f978c0a68e4506de527\riscv_v_stage_A4EAF_A7C6B because it contains processes (run 'proc' command first).
Warning: Ignoring module riscv_v_ctrl because it contains processes (run 'proc' command first).
Warning: Ignoring module $paramod\riscv_v_stage_C9449\NUM_STAGES=s32'00000000000000000000000000000001 because it contains processes (run 'proc' command first).
62. Executing RTLIL backend.
Warnings: 4 unique messages, 4 total
End of script. Logfile hash: 8ee378dff1, CPU: user 0.16s system 0.02s, MEM: 43.50 MB peak
Yosys 0.46 (git sha1 e97731b9d, clang++ 14.0.0-1ubuntu1.1 -fPIC -O3)
Time spent: 41% 2x read_liberty (0 sec), 30% 114x read_verilog (0 sec), ...
Elapsed time: 0:00.23[h:]min:sec. CPU time: user 0.21 sys 0.02 (100%). Peak memory: 45824KB.
mkdir -p ./results/nangate45/riscv_v_ctrl/base ./logs/nangate45/riscv_v_ctrl/base ./reports/nangate45/riscv_v_ctrl/base
(export VERILOG_FILES=./results/nangate45/riscv_v_ctrl/base/1_synth.rtlil; \
env time -f 'Elapsed time: %E[h:]min:sec. CPU time: user %U sys %S (%P). Peak memory: %MKB.' /home/ubuntu/mbucio/tools/openROAD/tools/install/yosys/bin/yosys -v 3 -c /home/ubuntu/mbucio/tools/openROAD/flow/scripts/synth_hier_report.tcl) 2>&1 | tee /home/ubuntu/mbucio/tools/openROAD/flow/logs/nangate45/riscv_v_ctrl/base/1_1_yosys_hier_report.log
End of script. Logfile hash: da39a3ee5e, CPU: user 0.00s system 0.00s, MEM: 11.25 MB peak
Yosys 0.46 (git sha1 e97731b9d, clang++ 14.0.0-1ubuntu1.1 -fPIC -O3)
Time spent: no commands executed
Elapsed time: 0:00.00[h:]min:sec. CPU time: user 0.00 sys 0.00 (80%). Peak memory: 13056KB.
mkdir -p ./results/nangate45/riscv_v_ctrl/base ./logs/nangate45/riscv_v_ctrl/base ./reports/nangate45/riscv_v_ctrl/base ./objects/nangate45/riscv_v_ctrl/base
(export VERILOG_FILES=./results/nangate45/riscv_v_ctrl/base/1_synth.rtlil; \
env time -f 'Elapsed time: %E[h:]min:sec. CPU time: user %U sys %S (%P). Peak memory: %MKB.' /home/ubuntu/mbucio/tools/openROAD/tools/install/yosys/bin/yosys -v 3 -c /home/ubuntu/mbucio/tools/openROAD/flow/scripts/synth.tcl) 2>&1 | tee /home/ubuntu/mbucio/tools/openROAD/flow/logs/nangate45/riscv_v_ctrl/base/1_1_yosys.log
1. Executing RTLIL frontend.
2. Executing Liberty frontend: ./objects/nangate45/riscv_v_ctrl/base/lib/NangateOpenCellLibrary_typical.lib
3. Executing Verilog-2005 frontend: /home/ubuntu/mbucio/tools/openROAD/flow/platforms/nangate45/cells_clkgate.v
Using ABC speed script.
Extracting clock period from SDC file: ./results/nangate45/riscv_v_ctrl/base/clock_period.txt
Setting clock period to 15.0
synth -top riscv_v_ctrl -run :fine -flatten -extra-map /home/ubuntu/mbucio/tools/openROAD/flow/platforms/common/lcu_kogge_stone.v
4. Executing SYNTH pass.
4.1. Executing HIERARCHY pass (managing design hierarchy).
4.1.1. Analyzing design hierarchy..
4.1.2. Analyzing design hierarchy..
4.2. Executing PROC pass (convert processes to netlists).
4.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
4.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
4.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
4.2.4. Executing PROC_INIT pass (extract init attributes).
4.2.5. Executing PROC_ARST pass (detect async resets in processes).
4.2.6. Executing PROC_ROM pass (convert switches to ROMs).
4.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
4.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
4.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Warning: Async reset value `\rst_val' is not constant!
4.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).
4.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
4.2.12. Executing OPT_EXPR pass (perform const folding).
4.3. Executing FLATTEN pass (flatten design).
4.4. Executing OPT_EXPR pass (perform const folding).
4.5. Executing OPT_CLEAN pass (remove unused cells and wires).
4.6. Executing CHECK pass (checking for obvious problems).
4.7. Executing OPT pass (performing simple optimizations).
4.7.1. Executing OPT_EXPR pass (perform const folding).
4.7.2. Executing OPT_MERGE pass (detect identical cells).
4.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
4.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
4.7.5. Executing OPT_MERGE pass (detect identical cells).
4.7.6. Executing OPT_DFF pass (perform DFF optimizations).
4.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
4.7.8. Executing OPT_EXPR pass (perform const folding).
4.7.9. Rerunning OPT passes. (Maybe there is more to do..)
4.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
4.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
4.7.12. Executing OPT_MERGE pass (detect identical cells).
4.7.13. Executing OPT_DFF pass (perform DFF optimizations).
4.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
4.7.15. Executing OPT_EXPR pass (perform const folding).
4.7.16. Finished OPT passes. (There is nothing left to do.)
4.8. Executing FSM pass (extract and optimize FSM).
4.8.1. Executing FSM_DETECT pass (finding FSMs in design).
4.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).
4.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).
4.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
4.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).
4.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
4.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).
4.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
4.9. Executing OPT pass (performing simple optimizations).
4.9.1. Executing OPT_EXPR pass (perform const folding).
4.9.2. Executing OPT_MERGE pass (detect identical cells).
4.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
4.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
4.9.5. Executing OPT_MERGE pass (detect identical cells).
4.9.6. Executing OPT_DFF pass (perform DFF optimizations).
4.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
4.9.8. Executing OPT_EXPR pass (perform const folding).
4.9.9. Rerunning OPT passes. (Maybe there is more to do..)
4.9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
4.9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
4.9.12. Executing OPT_MERGE pass (detect identical cells).
4.9.13. Executing OPT_DFF pass (perform DFF optimizations).
4.9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
4.9.15. Executing OPT_EXPR pass (perform const folding).
4.9.16. Rerunning OPT passes. (Maybe there is more to do..)
4.9.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
4.9.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
4.9.19. Executing OPT_MERGE pass (detect identical cells).
4.9.20. Executing OPT_DFF pass (perform DFF optimizations).
4.9.21. Executing OPT_CLEAN pass (remove unused cells and wires).
4.9.22. Executing OPT_EXPR pass (perform const folding).
4.9.23. Finished OPT passes. (There is nothing left to do.)
4.10. Executing WREDUCE pass (reducing word size of cells).
4.11. Executing PEEPOPT pass (run peephole optimizers).
4.12. Executing OPT_CLEAN pass (remove unused cells and wires).
4.13. Executing ALUMACC pass (create $alu and $macc cells).
4.14. Executing SHARE pass (SAT-based resource sharing).
4.15. Executing OPT pass (performing simple optimizations).
4.15.1. Executing OPT_EXPR pass (perform const folding).
4.15.2. Executing OPT_MERGE pass (detect identical cells).
4.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
4.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
4.15.5. Executing OPT_MERGE pass (detect identical cells).
4.15.6. Executing OPT_DFF pass (perform DFF optimizations).
4.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
4.15.8. Executing OPT_EXPR pass (perform const folding).
4.15.9. Finished OPT passes. (There is nothing left to do.)
4.16. Executing MEMORY pass.
4.16.1. Executing OPT_MEM pass (optimize memories).
4.16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
4.16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
4.16.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).
4.16.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
4.16.6. Executing OPT_CLEAN pass (remove unused cells and wires).
4.16.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
4.16.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
4.16.9. Executing OPT_CLEAN pass (remove unused cells and wires).
4.16.10. Executing MEMORY_COLLECT pass (generating $mem cells).
4.17. Executing OPT_CLEAN pass (remove unused cells and wires).
5. Executing SYNTH pass.
5.1. Executing OPT pass (performing simple optimizations).
5.1.1. Executing OPT_EXPR pass (perform const folding).
5.1.2. Executing OPT_MERGE pass (detect identical cells).
5.1.3. Executing OPT_DFF pass (perform DFF optimizations).
5.1.4. Executing OPT_CLEAN pass (remove unused cells and wires).
5.1.5. Rerunning OPT passes. (Removed registers in this run.)
5.1.6. Executing OPT_EXPR pass (perform const folding).
5.1.7. Executing OPT_MERGE pass (detect identical cells).
5.1.8. Executing OPT_DFF pass (perform DFF optimizations).
5.1.9. Executing OPT_CLEAN pass (remove unused cells and wires).
5.1.10. Finished fast OPT passes.
5.2. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
5.3. Executing OPT pass (performing simple optimizations).
5.3.1. Executing OPT_EXPR pass (perform const folding).
5.3.2. Executing OPT_MERGE pass (detect identical cells).
5.3.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
5.3.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
5.3.5. Executing OPT_MERGE pass (detect identical cells).
5.3.6. Executing OPT_SHARE pass.
5.3.7. Executing OPT_DFF pass (perform DFF optimizations).
5.3.8. Executing OPT_CLEAN pass (remove unused cells and wires).
5.3.9. Executing OPT_EXPR pass (perform const folding).
5.3.10. Finished OPT passes. (There is nothing left to do.)
5.4. Executing TECHMAP pass (map to technology primitives).
5.4.1. Executing Verilog-2005 frontend: /home/ubuntu/mbucio/tools/openROAD/tools/install/yosys/bin/../share/yosys/techmap.v
5.4.2. Executing Verilog-2005 frontend: /home/ubuntu/mbucio/tools/openROAD/flow/platforms/common/lcu_kogge_stone.v
5.4.3. Continuing TECHMAP pass.
5.5. Executing OPT pass (performing simple optimizations).
5.5.1. Executing OPT_EXPR pass (perform const folding).
5.5.2. Executing OPT_MERGE pass (detect identical cells).
5.5.3. Executing OPT_DFF pass (perform DFF optimizations).
5.5.4. Executing OPT_CLEAN pass (remove unused cells and wires).
5.5.5. Finished fast OPT passes.
5.6. Executing ABC pass (technology mapping using ABC).
5.6.1. Extracting gate netlist of module `\riscv_v_ctrl' to `<abc-temp-dir>/input.blif'..
5.7. Executing OPT pass (performing simple optimizations).
5.7.1. Executing OPT_EXPR pass (perform const folding).
5.7.2. Executing OPT_MERGE pass (detect identical cells).
5.7.3. Executing OPT_DFF pass (perform DFF optimizations).
5.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
5.7.5. Finished fast OPT passes.
5.8. Executing HIERARCHY pass (managing design hierarchy).
5.8.1. Analyzing design hierarchy..
5.8.2. Analyzing design hierarchy..
5.9. Printing statistics.
5.10. Executing CHECK pass (checking for obvious problems).
6. Executing OPT pass (performing simple optimizations).
6.1. Executing OPT_EXPR pass (perform const folding).
6.2. Executing OPT_MERGE pass (detect identical cells).
6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
6.5. Executing OPT_MERGE pass (detect identical cells).
6.6. Executing OPT_DFF pass (perform DFF optimizations).
6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
6.8. Executing OPT_EXPR pass (perform const folding).
6.9. Rerunning OPT passes. (Maybe there is more to do..)
6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
6.12. Executing OPT_MERGE pass (detect identical cells).
6.13. Executing OPT_DFF pass (perform DFF optimizations).
6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
6.15. Executing OPT_EXPR pass (perform const folding).
6.16. Finished OPT passes. (There is nothing left to do.)
7. Executing TECHMAP pass (map to technology primitives).
7.1. Executing Verilog-2005 frontend: /home/ubuntu/mbucio/tools/openROAD/flow/platforms/nangate45/cells_latch.v
7.2. Continuing TECHMAP pass.
8. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
8.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
9. Executing OPT pass (performing simple optimizations).
9.1. Executing OPT_EXPR pass (perform const folding).
9.2. Executing OPT_MERGE pass (detect identical cells).
9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
9.5. Executing OPT_MERGE pass (detect identical cells).
9.6. Executing OPT_DFF pass (perform DFF optimizations).
9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
9.8. Executing OPT_EXPR pass (perform const folding).
9.9. Rerunning OPT passes. (Maybe there is more to do..)
9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
9.12. Executing OPT_MERGE pass (detect identical cells).
9.13. Executing OPT_DFF pass (perform DFF optimizations).
9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
9.15. Executing OPT_EXPR pass (perform const folding).
9.16. Finished OPT passes. (There is nothing left to do.)
abc -script /home/ubuntu/mbucio/tools/openROAD/flow/scripts/abc_speed.script -liberty ./objects/nangate45/riscv_v_ctrl/base/lib/NangateOpenCellLibrary_typical.lib -constr ./objects/nangate45/riscv_v_ctrl/base/abc.constr -dont_use TAPCELL_X1 -dont_use FILLCELL_X1 -dont_use AOI211_X1 -dont_use OAI211_X1 -D 15.0
10. Executing ABC pass (technology mapping using ABC).
10.1. Extracting gate netlist of module `\riscv_v_ctrl' to `<abc-temp-dir>/input.blif'..
10.1.1. Executing ABC.
10.1.2. Re-integrating ABC results.
11. Executing SETUNDEF pass (replace undef values with defined constants).
12. Executing SPLITNETS pass (splitting up multi-bit signals).
13. Executing OPT_CLEAN pass (remove unused cells and wires).
14. Executing HILOMAP pass (mapping to constant drivers).
15. Executing INSBUF pass (insert buffer cells for connected wires).
16. Executing CHECK pass (checking for obvious problems).
17. Printing statistics.
18. Executing Verilog backend.
exec cp ./designs/nangate45/riscv_v_ctrl/constraint.sdc ./results/nangate45/riscv_v_ctrl/base/1_synth.sdc
Warnings: 9 unique messages, 75 total
End of script. Logfile hash: 22e7897ee8, CPU: user 0.48s system 0.03s, MEM: 37.50 MB peak
Yosys 0.46 (git sha1 e97731b9d, clang++ 14.0.0-1ubuntu1.1 -fPIC -O3)
Time spent: 49% 2x abc (0 sec), 7% 23x opt_expr (0 sec), ...
Elapsed time: 0:01.07[h:]min:sec. CPU time: user 1.01 sys 0.06 (100%). Peak memory: 39040KB.
mkdir -p ./results/nangate45/riscv_v_ctrl/base ./logs/nangate45/riscv_v_ctrl/base ./reports/nangate45/riscv_v_ctrl/base
cp ./results/nangate45/riscv_v_ctrl/base/1_1_yosys.v ./results/nangate45/riscv_v_ctrl/base/1_synth.v
OpenROAD v2.0-16316-gf9cfd9383 
Features included (+) or not (-): +Charts +GPU +GUI +Python
This program is licensed under the BSD-3 license. See the LICENSE file for details.
Components of this program may be licensed under more restrictive licenses which must be honored.
[INFO ORD-0030] Using 8 thread(s).
mkdir -p ./objects/nangate45/riscv_v_ctrl/base
Running floorplan.tcl, stage 2_1_floorplan
[INFO ODB-0227] LEF file: /home/ubuntu/mbucio/tools/openROAD/flow/platforms/nangate45/lef/NangateOpenCellLibrary.tech.lef, created 22 layers, 27 vias
[INFO ODB-0227] LEF file: /home/ubuntu/mbucio/tools/openROAD/flow/platforms/nangate45/lef/NangateOpenCellLibrary.macro.mod.lef, created 135 library cells
[WARNING STA-0347] current_design for other than top cell not supported.

==========================================================================
Floorplan check_setup
--------------------------------------------------------------------------
Warning: There is 1 unconstrained endpoint.
number instances in verilog is 300
[WARNING IFP-0028] Core area lower left (200.000, 200.000) snapped to (200.070, 200.200).
[INFO IFP-0001] Added 2714 rows of 19999 site FreePDK45_38x28_10R_NP_162NW_34O.
[INFO RSZ-0026] Removed 18 buffers.
Default units for flow
 time 1ns
 capacitance 1fF
 resistance 1kohm
 voltage 1v
 current 1mA
 power 1nW
 distance 1um
Report metrics stage 2, floorplan final...

==========================================================================
floorplan final report_design_area
--------------------------------------------------------------------------
Design area 508 u^2 0% utilization.
Elapsed time: 0:00.40[h:]min:sec. CPU time: user 0.36 sys 0.04 (100%). Peak memory: 123580KB.
Running io_placement_random.tcl, stage 2_2_floorplan_io
[WARNING STA-0347] current_design for other than top cell not supported.
place_pins -hor_layers metal5 -ver_layers metal6 -random
Found 0 macro blocks.
Using 2 tracks default min distance between IO pins.
[INFO PPL-0007] Random pin placement.
Elapsed time: 0:00.32[h:]min:sec. CPU time: user 0.27 sys 0.04 (99%). Peak memory: 121624KB.
Running tdms_place.tcl, stage 2_3_floorplan_tdms
exec cp ./results/nangate45/riscv_v_ctrl/base/2_2_floorplan_io.odb ./results/nangate45/riscv_v_ctrl/base/2_3_floorplan_tdms.odb
Elapsed time: 0:00.14[h:]min:sec. CPU time: user 0.11 sys 0.03 (100%). Peak memory: 100536KB.
Running macro_place.tcl, stage 2_4_floorplan_macro
[WARNING STA-0347] current_design for other than top cell not supported.
No macros found: Skipping macro_placement
Elapsed time: 0:00.31[h:]min:sec. CPU time: user 0.27 sys 0.03 (99%). Peak memory: 120252KB.
Running tapcell.tcl, stage 2_5_floorplan_tapcell
[WARNING STA-0347] current_design for other than top cell not supported.
[INFO TAP-0004] Inserted 5428 endcaps.
[INFO TAP-0005] Inserted 42098 tapcells.
Elapsed time: 0:00.42[h:]min:sec. CPU time: user 0.37 sys 0.05 (100%). Peak memory: 140220KB.
Running pdn.tcl, stage 2_6_floorplan_pdn
[WARNING STA-0347] current_design for other than top cell not supported.
[INFO PDN-0001] Inserting grid: grid
Elapsed time: 0:04.21[h:]min:sec. CPU time: user 4.12 sys 0.09 (100%). Peak memory: 214776KB.
cp ./results/nangate45/riscv_v_ctrl/base/2_6_floorplan_pdn.odb ./results/nangate45/riscv_v_ctrl/base/2_floorplan.odb
Running global_place_skip_io.tcl, stage 3_1_place_gp_skip_io
[INFO GPL-0002] DBU: 2000
[INFO GPL-0003] SiteSize: (  0.190  1.400 ) um
[INFO GPL-0004] CoreBBox: ( 200.070 200.200 ) ( 3999.880 3999.800 ) um
[INFO GPL-0006] NumInstances:             47808
[INFO GPL-0007] NumPlaceInstances:          282
[INFO GPL-0008] NumFixedInstances:        47526
[INFO GPL-0009] NumDummyInstances:            0
[INFO GPL-0010] NumNets:                    362
[INFO GPL-0011] NumPins:                   1162
[INFO GPL-0012] DieBBox:  (  0.000  0.000 ) ( 4000.000 4000.000 ) um
[INFO GPL-0013] CoreBBox: ( 200.070 200.200 ) ( 3999.880 3999.800 ) um
[INFO GPL-0016] CoreArea:            14437758.076 um^2
[INFO GPL-0017] NonPlaceInstsArea:    12641.916 um^2
[INFO GPL-0018] PlaceInstsArea:         507.528 um^2
[INFO GPL-0019] Util:                     0.004 %
[INFO GPL-0020] StdInstsArea:           507.528 um^2
[INFO GPL-0021] MacroInstsArea:           0.000 um^2
[INFO GPL-0031] FillerInit:NumGCells:   8684051
[INFO GPL-0032] FillerInit:NumGNets:        362
[INFO GPL-0033] FillerInit:NumGPins:       1162
[INFO GPL-0023] TargetDensity:            1.000
[INFO GPL-0024] AvrgPlaceInstArea:        1.800 um^2
[INFO GPL-0025] IdealBinArea:             1.800 um^2
[INFO GPL-0026] IdealBinCnt:            8022115
[INFO GPL-0027] TotalBinArea:        14437758.076 um^2
[INFO GPL-0028] BinCnt:      2048   2048
[INFO GPL-0029] BinSize: (  1.855  1.855 )
[INFO GPL-0030] NumBins: 4194304
[INFO GPL-0002] DBU: 2000
[INFO GPL-0003] SiteSize: (  0.190  1.400 ) um
[INFO GPL-0004] CoreBBox: ( 200.070 200.200 ) ( 3999.880 3999.800 ) um
[INFO GPL-0006] NumInstances:             47808
[INFO GPL-0007] NumPlaceInstances:          282
[INFO GPL-0008] NumFixedInstances:        47526
[INFO GPL-0009] NumDummyInstances:            0
[INFO GPL-0010] NumNets:                    362
[INFO GPL-0011] NumPins:                   1058
[INFO GPL-0012] DieBBox:  (  0.000  0.000 ) ( 4000.000 4000.000 ) um
[INFO GPL-0013] CoreBBox: ( 200.070 200.200 ) ( 3999.880 3999.800 ) um
[INFO GPL-0016] CoreArea:            14437758.076 um^2
[INFO GPL-0017] NonPlaceInstsArea:    12641.916 um^2
[INFO GPL-0018] PlaceInstsArea:         507.528 um^2
[INFO GPL-0019] Util:                     0.004 %
[INFO GPL-0020] StdInstsArea:           507.528 um^2
[INFO GPL-0021] MacroInstsArea:           0.000 um^2
[INFO GPL-0031] FillerInit:NumGCells:   7902515
[INFO GPL-0032] FillerInit:NumGNets:        362
[INFO GPL-0033] FillerInit:NumGPins:       1058
[INFO GPL-0023] TargetDensity:            0.910
[INFO GPL-0024] AvrgPlaceInstArea:        1.800 um^2
[INFO GPL-0025] IdealBinArea:             1.978 um^2
[INFO GPL-0026] IdealBinCnt:            7300153
[INFO GPL-0027] TotalBinArea:        14437758.076 um^2
[INFO GPL-0028] BinCnt:      2048   2048
[INFO GPL-0029] BinSize: (  1.855  1.855 )
[INFO GPL-0030] NumBins: 4194304
[NesterovSolve] Iter:    1 overflow: 0.938 HPWL: 676079
[NesterovSolve] Iter:   10 overflow: 0.950 HPWL: 435602
[NesterovSolve] Iter:   20 overflow: 0.950 HPWL: 431072
[NesterovSolve] Iter:   30 overflow: 0.950 HPWL: 431159
[NesterovSolve] Iter:   40 overflow: 0.950 HPWL: 430783
[NesterovSolve] Iter:   50 overflow: 0.950 HPWL: 430706
[NesterovSolve] Iter:   60 overflow: 0.950 HPWL: 430815
[NesterovSolve] Iter:   70 overflow: 0.950 HPWL: 430795
[NesterovSolve] Iter:   80 overflow: 0.950 HPWL: 430752
[NesterovSolve] Iter:   90 overflow: 0.950 HPWL: 430713
[NesterovSolve] Iter:  100 overflow: 0.950 HPWL: 430786
[NesterovSolve] Iter:  110 overflow: 0.950 HPWL: 430798
[NesterovSolve] Iter:  120 overflow: 0.950 HPWL: 430758
[NesterovSolve] Iter:  130 overflow: 0.950 HPWL: 430782
[NesterovSolve] Iter:  140 overflow: 0.950 HPWL: 430793
[NesterovSolve] Iter:  150 overflow: 0.950 HPWL: 430930
[NesterovSolve] Iter:  160 overflow: 0.950 HPWL: 431542
[NesterovSolve] Iter:  170 overflow: 0.950 HPWL: 433234
[NesterovSolve] Iter:  180 overflow: 0.950 HPWL: 436966
[NesterovSolve] Iter:  190 overflow: 0.950 HPWL: 444528
[NesterovSolve] Iter:  200 overflow: 0.949 HPWL: 460109
[NesterovSolve] Iter:  210 overflow: 0.946 HPWL: 489178
[NesterovSolve] Iter:  220 overflow: 0.944 HPWL: 537473
[NesterovSolve] Iter:  230 overflow: 0.943 HPWL: 612110
[NesterovSolve] Iter:  240 overflow: 0.941 HPWL: 740027
[NesterovSolve] Iter:  250 overflow: 0.937 HPWL: 984466
[NesterovSolve] Iter:  260 overflow: 0.934 HPWL: 1344528
[NesterovSolve] Iter:  270 overflow: 0.929 HPWL: 1824295
[NesterovSolve] Iter:  280 overflow: 0.918 HPWL: 2419709
[NesterovSolve] Iter:  290 overflow: 0.882 HPWL: 3164195
[NesterovSolve] Iter:  300 overflow: 0.899 HPWL: 1660523
[NesterovSolve] Iter:  310 overflow: 0.877 HPWL: 1755012
[NesterovSolve] Iter:  320 overflow: 0.820 HPWL: 4179548
[NesterovSolve] Iter:  330 overflow: 0.829 HPWL: 1410912
[NesterovSolve] Iter:  340 overflow: 0.739 HPWL: 4953533
[NesterovSolve] Iter:  350 overflow: 0.739 HPWL: 2458733
[NesterovSolve] Iter:  360 overflow: 0.734 HPWL: 2308039
[NesterovSolve] Iter:  370 overflow: 0.645 HPWL: 3474116
[NesterovSolve] Iter:  380 overflow: 0.602 HPWL: 3008773
[NesterovSolve] Iter:  390 overflow: 0.554 HPWL: 3178405
[NesterovSolve] Iter:  400 overflow: 0.509 HPWL: 3346145
[NesterovSolve] Iter:  410 overflow: 0.451 HPWL: 3937636
[NesterovSolve] Iter:  420 overflow: 0.379 HPWL: 4804339
[NesterovSolve] Iter:  430 overflow: 0.298 HPWL: 5925664
[NesterovSolve] Iter:  440 overflow: 0.210 HPWL: 7574972
[NesterovSolve] Iter:  450 overflow: 0.212 HPWL: 7827033
[NesterovSolve] Iter:  460 overflow: 0.231 HPWL: 4384812
[NesterovSolve] Iter:  470 overflow: 0.215 HPWL: 2976007
[NesterovSolve] Iter:  480 overflow: 0.185 HPWL: 2720128
[NesterovSolve] Iter:  490 overflow: 0.179 HPWL: 2643891
[NesterovSolve] Iter:  500 overflow: 0.131 HPWL: 2630768
[NesterovSolve] Iter:  510 overflow: 0.114 HPWL: 2598847
[NesterovSolve] Finished with Overflow: 0.097495
Elapsed time: 44:59.03[h:]min:sec. CPU time: user 2971.20 sys 2.86 (110%). Peak memory: 2566616KB.
Running io_placement.tcl, stage 3_2_place_iop
place_pins -hor_layers metal5 -ver_layers metal6
Found 0 macro blocks.
Using 2 tracks default min distance between IO pins.
[INFO PPL-0010] Tentative 0 to set up sections.
[INFO PPL-0001] Number of slots           28564
[INFO PPL-0002] Number of I/O             104
[INFO PPL-0003] Number of I/O w/sink      104
[INFO PPL-0004] Number of I/O w/o sink    0
[INFO PPL-0005] Slots per section         200
[INFO PPL-0006] Slots increase factor     0.01
[INFO PPL-0008] Successfully assigned pins to sections.
[INFO PPL-0012] I/O nets HPWL: 197999.06 um.
Elapsed time: 0:00.65[h:]min:sec. CPU time: user 0.57 sys 0.07 (99%). Peak memory: 195260KB.
Running global_place.tcl, stage 3_3_place_gp
[INFO GPL-0002] DBU: 2000
[INFO GPL-0003] SiteSize: (  0.190  1.400 ) um
[INFO GPL-0004] CoreBBox: ( 200.070 200.200 ) ( 3999.880 3999.800 ) um
[INFO GPL-0006] NumInstances:             47808
[INFO GPL-0007] NumPlaceInstances:          282
[INFO GPL-0008] NumFixedInstances:        47526
[INFO GPL-0009] NumDummyInstances:            0
[INFO GPL-0010] NumNets:                    362
[INFO GPL-0011] NumPins:                   1162
[INFO GPL-0012] DieBBox:  (  0.000  0.000 ) ( 4000.000 4000.000 ) um
[INFO GPL-0013] CoreBBox: ( 200.070 200.200 ) ( 3999.880 3999.800 ) um
[INFO GPL-0016] CoreArea:            14437758.076 um^2
[INFO GPL-0017] NonPlaceInstsArea:    12641.916 um^2
[INFO GPL-0018] PlaceInstsArea:         507.528 um^2
[INFO GPL-0019] Util:                     0.004 %
[INFO GPL-0020] StdInstsArea:           507.528 um^2
[INFO GPL-0021] MacroInstsArea:           0.000 um^2
[INFO GPL-0031] FillerInit:NumGCells:   8684051
[INFO GPL-0032] FillerInit:NumGNets:        362
[INFO GPL-0033] FillerInit:NumGPins:       1162
[INFO GPL-0023] TargetDensity:            1.000
[INFO GPL-0024] AvrgPlaceInstArea:        1.800 um^2
[INFO GPL-0025] IdealBinArea:             1.800 um^2
[INFO GPL-0026] IdealBinCnt:            8022115
[INFO GPL-0027] TotalBinArea:        14437758.076 um^2
[INFO GPL-0028] BinCnt:      2048   2048
[INFO GPL-0029] BinSize: (  1.855  1.855 )
[INFO GPL-0030] NumBins: 4194304
global_placement -density 0.9100035183631553 -pad_left 0 -pad_right 0 -routability_driven -timing_driven
[INFO GPL-0002] DBU: 2000
[INFO GPL-0003] SiteSize: (  0.190  1.400 ) um
[INFO GPL-0004] CoreBBox: ( 200.070 200.200 ) ( 3999.880 3999.800 ) um
[INFO GPL-0006] NumInstances:             47808
[INFO GPL-0007] NumPlaceInstances:          282
[INFO GPL-0008] NumFixedInstances:        47526
[INFO GPL-0009] NumDummyInstances:            0
[INFO GPL-0010] NumNets:                    362
[INFO GPL-0011] NumPins:                   1162
[INFO GPL-0012] DieBBox:  (  0.000  0.000 ) ( 4000.000 4000.000 ) um
[INFO GPL-0013] CoreBBox: ( 200.070 200.200 ) ( 3999.880 3999.800 ) um
[INFO GPL-0016] CoreArea:            14437758.076 um^2
[INFO GPL-0017] NonPlaceInstsArea:    12641.916 um^2
[INFO GPL-0018] PlaceInstsArea:         507.528 um^2
[INFO GPL-0019] Util:                     0.004 %
[INFO GPL-0020] StdInstsArea:           507.528 um^2
[INFO GPL-0021] MacroInstsArea:           0.000 um^2
[InitialPlace]  Iter: 1 CG residual: 0.00000030 HPWL: 400036470
[InitialPlace]  Iter: 2 CG residual: 0.00002494 HPWL: 333529439
[InitialPlace]  Iter: 3 CG residual: 0.00003010 HPWL: 131923043
[InitialPlace]  Iter: 4 CG residual: 0.00000028 HPWL: 30811694
[InitialPlace]  Iter: 5 CG residual: 0.00000005 HPWL: 24043635
[INFO GPL-0031] FillerInit:NumGCells:   7902515
[INFO GPL-0032] FillerInit:NumGNets:        362
[INFO GPL-0033] FillerInit:NumGPins:       1162
[INFO GPL-0023] TargetDensity:            0.910
[INFO GPL-0024] AvrgPlaceInstArea:        1.800 um^2
[INFO GPL-0025] IdealBinArea:             1.978 um^2
[INFO GPL-0026] IdealBinCnt:            7300153
[INFO GPL-0027] TotalBinArea:        14437758.076 um^2
[INFO GPL-0028] BinCnt:      2048   2048
[INFO GPL-0029] BinSize: (  1.855  1.855 )
[INFO GPL-0030] NumBins: 4194304
[NesterovSolve] Iter:    1 overflow: 0.766 HPWL: 21445311
[INFO GPL-0100] Timing-driven: executing resizer for reweighting nets.
[INFO GPL-0101] Timing-driven: worst slack 8.71e-09
[INFO GPL-0103] Timing-driven: weighted 35 nets.
[NesterovSolve] Iter:   10 overflow: 0.684 HPWL: 21123334
[NesterovSolve] Iter:   20 overflow: 0.703 HPWL: 20655101
[NesterovSolve] Iter:   30 overflow: 0.682 HPWL: 20010519
[NesterovSolve] Iter:   40 overflow: 0.701 HPWL: 18271029
[NesterovSolve] Iter:   50 overflow: 0.695 HPWL: 18304644
[NesterovSolve] Iter:   60 overflow: 0.702 HPWL: 18278859
[NesterovSolve] Iter:   70 overflow: 0.695 HPWL: 18295507
[NesterovSolve] Iter:   80 overflow: 0.702 HPWL: 18281651
[NesterovSolve] Iter:   90 overflow: 0.696 HPWL: 18294986
[NesterovSolve] Iter:  100 overflow: 0.702 HPWL: 18282716
[NesterovSolve] Iter:  110 overflow: 0.696 HPWL: 18293787
[NesterovSolve] Iter:  120 overflow: 0.702 HPWL: 18283047
[NesterovSolve] Iter:  130 overflow: 0.696 HPWL: 18293693
[NesterovSolve] Iter:  140 overflow: 0.702 HPWL: 18283685
[NesterovSolve] Iter:  150 overflow: 0.696 HPWL: 18292884
[NesterovSolve] Iter:  160 overflow: 0.702 HPWL: 18285008
[NesterovSolve] Iter:  170 overflow: 0.695 HPWL: 18292682
[NesterovSolve] Iter:  180 overflow: 0.702 HPWL: 18285814
[NesterovSolve] Iter:  190 overflow: 0.695 HPWL: 18295859
[NesterovSolve] Iter:  200 overflow: 0.702 HPWL: 18292202
[NesterovSolve] Iter:  210 overflow: 0.693 HPWL: 18306996
[NesterovSolve] Iter:  220 overflow: 0.701 HPWL: 18313430
[NesterovSolve] Iter:  230 overflow: 0.692 HPWL: 18368173
[NesterovSolve] Iter:  240 overflow: 0.700 HPWL: 18452075
[NesterovSolve] Iter:  250 overflow: 0.691 HPWL: 18763227
[NesterovSolve] Iter:  260 overflow: 0.686 HPWL: 19349999
[NesterovSolve] Iter:  270 overflow: 0.668 HPWL: 20447271
[INFO GPL-0100] Timing-driven: executing resizer for reweighting nets.
[INFO GPL-0101] Timing-driven: worst slack 8.71e-09
[INFO GPL-0103] Timing-driven: weighted 35 nets.
[NesterovSolve] Iter:  280 overflow: 0.602 HPWL: 21744581
[NesterovSolve] Snapshot saved at iter = 280
[INFO GPL-0100] Timing-driven: executing resizer for reweighting nets.
[INFO GPL-0101] Timing-driven: worst slack 8.73e-09
[INFO GPL-0103] Timing-driven: weighted 35 nets.
[NesterovSolve] Iter:  290 overflow: 0.463 HPWL: 23584796
[NesterovSolve] Iter:  300 overflow: 0.586 HPWL: 20883393
[NesterovSolve] Iter:  310 overflow: 0.671 HPWL: 19596008
[NesterovSolve] Iter:  320 overflow: 0.379 HPWL: 26243320
[NesterovSolve] Iter:  330 overflow: 0.579 HPWL: 20560024
[INFO GPL-0100] Timing-driven: executing resizer for reweighting nets.
[INFO GPL-0101] Timing-driven: worst slack 8.71e-09
[INFO GPL-0103] Timing-driven: weighted 35 nets.
[INFO GPL-0075] Routability numCall: 1 inflationIterCnt: 1 bloatIterCnt: 0
[INFO GPL-0036] TileBBox: (    0    0 ) ( 4200 4200 ) DBU
[INFO GPL-0038] TileCnt:    1904 1904
[INFO GPL-0040] NumTiles: 3625216
[INFO GPL-0081] TotalRouteOverflow: 1.3682267665863037
[INFO GPL-0082] OverflowTileCnt: 20
[INFO GPL-0083] 0.5%RC: 0.46549128521335115
[INFO GPL-0084] 1.0%RC: 0.45917295788619034
[INFO GPL-0085] 2.0%RC: 0.4544565591209716
[INFO GPL-0086] 5.0%RC: 0.433631712756156
[INFO GPL-0087] FinalRC: 0.46233213
[INFO GPL-0077] FinalRC lower than targetRC(1.01), routability not needed.
[NesterovSolve] Iter:  340 overflow: 0.139 HPWL: 30616543
[INFO GPL-0100] Timing-driven: executing resizer for reweighting nets.
[INFO GPL-0101] Timing-driven: worst slack 8.72e-09
[INFO GPL-0103] Timing-driven: weighted 35 nets.
[NesterovSolve] Iter:  350 overflow: 0.505 HPWL: 20611904
[NesterovSolve] Iter:  360 overflow: 0.135 HPWL: 26167472
[NesterovSolve] Iter:  370 overflow: 0.313 HPWL: 26491601
[NesterovSolve] Iter:  380 overflow: 0.347 HPWL: 24103620
